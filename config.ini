[setup]
# set true depending if the network should be trained, tested or evaluated
train = false
test = false
evaluate = true
# number of steps for testing
test_steps = 6000
# the scenario which should be evaluated (see thesis)
evaluate_scenario = 1
# starting position of the person
starting_pos_person_radius = 4.0
starting_pos_person_angle = 0.0
# set to true or false, if the visualization should be turned on or off and choose and update rate of teh figures
show_simulation_visualization = true
simulation_visualization_update_rate = 1
show_snn_visualization = true
snn_visualization_update_rate = 1
name_cann_weights = weights_run_cann.txt
name_dist_weights = weights_run_dist.txt

[robot]
# robot paramters
# in meter
width = 0.4
max_angle_velocity = 0.2
# in m/s
max_velocity = 2

[person]
# parameters for the person simulation. Can also be changed during the simulation in code, to e.g. adapt the velocity
person_velocity = 1
turn_angle_time_step = 1
turn_probability = 20
min_wait_turn_steps = 20
min_turn_angle = 10
max_turn_angle = 20
fps = 10
change_angle = True

[CANN]
# min 6x6
number_neurons_x = 40
number_neurons_y = 40
# radius in meter covered by a neuron in the CANN
ratio_radius = 0.390625
# angle covered by a neuron in the CANN
ratio_angle = 4.5

[simulation]
# in ms
simulation_step_time = 100
# in meter
desired_distance_person_x = 0
desired_distance_person_y = 4

[reward.cann]
scaler_x = 0.000002
scaler_y = 0.0001

[reward.distance]
scaler = 0.005



[velocity.network]
tau = 20.0
v_threshold = 100.0
v_reset = 0.0
w_start = 10.0

[velocity.RSTDP]
tau_pre = 20.0
tau_post = 20.0
w_min = -300.0
w_max = 300.0
c_min = 0.0
c_max = 20.0
dApre = 0.001
tau_c = 500.0
tau_r = 200.0


[distance.network]
tau = 20.0
v_threshold = 1.0
v_reset = 0.0
w_start = 12.0

[distance.RSTDP]
tau_pre = 105.0
tau_post = 105.0
w_min = -300.0
w_max = 300.0
c_min = 0.0
c_max = 100.0
dApre = 0.001
tau_c = 500.0
tau_r = 200.0